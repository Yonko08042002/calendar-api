// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


enum Role {
  admin
  leader
  employee
}


model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  role        Role     @default(employee) // "admin" | "leader" | "employee"
  password    String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
    assignedTasks       Task[]        @relation("AssignedTasks")
  createdTasks Task[]       @relation("CreatedTasks")
  groupMembers GroupMember[]
  @@map("users")
}


model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  members     GroupMember[]
  tasks       Task[]
  @@map("group")
}

model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  role      Role @default(employee)   // "admin" | "leader" | "employee"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User  @relation(fields: [userId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])

  @@unique([groupId, userId])
    @@map("groupMember")
}
enum Status {
 pending  
in_progress
completed
}

model Task {
  id          String   @id @default(uuid())
  name        String
  description String?
  assigneeId  String?
  creatorId   String
  groupId     String?
  status      Status  @default(pending) // "pending" | "in_progress" | "completed"
  startDate   DateTime?
  endDate     DateTime?
  confirmation Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator    User   @relation("CreatedTasks", fields: [creatorId], references: [id])
  group      Group? @relation(fields: [groupId], references: [id])
  @@map("task")
}